# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.equipment_type import EquipmentType
from swagger_server import util


class Equipment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, equipment_type: EquipmentType=None, magnitude: str=None, quantity: int=None):  # noqa: E501
        """Equipment - a model defined in Swagger

        :param id: The id of this Equipment.  # noqa: E501
        :type id: int
        :param equipment_type: The equipment_type of this Equipment.  # noqa: E501
        :type equipment_type: EquipmentType
        :param magnitude: The magnitude of this Equipment.  # noqa: E501
        :type magnitude: str
        :param quantity: The quantity of this Equipment.  # noqa: E501
        :type quantity: int
        """
        self.swagger_types = {
            'id': int,
            'equipment_type': EquipmentType,
            'magnitude': str,
            'quantity': int
        }

        self.attribute_map = {
            'id': 'id',
            'equipment_type': 'equipmentType',
            'magnitude': 'magnitude',
            'quantity': 'quantity'
        }

        self._id = id
        self._equipment_type = equipment_type
        self._magnitude = magnitude
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt) -> 'Equipment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Equipment of this Equipment.  # noqa: E501
        :rtype: Equipment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Equipment.


        :return: The id of this Equipment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Equipment.


        :param id: The id of this Equipment.
        :type id: int
        """

        self._id = id

    @property
    def equipment_type(self) -> EquipmentType:
        """Gets the equipment_type of this Equipment.


        :return: The equipment_type of this Equipment.
        :rtype: EquipmentType
        """
        return self._equipment_type

    @equipment_type.setter
    def equipment_type(self, equipment_type: EquipmentType):
        """Sets the equipment_type of this Equipment.


        :param equipment_type: The equipment_type of this Equipment.
        :type equipment_type: EquipmentType
        """
        if equipment_type is None:
            raise ValueError("Invalid value for `equipment_type`, must not be `None`")  # noqa: E501

        self._equipment_type = equipment_type

    @property
    def magnitude(self) -> str:
        """Gets the magnitude of this Equipment.

        The weight or strength of the equipment  # noqa: E501

        :return: The magnitude of this Equipment.
        :rtype: str
        """
        return self._magnitude

    @magnitude.setter
    def magnitude(self, magnitude: str):
        """Sets the magnitude of this Equipment.

        The weight or strength of the equipment  # noqa: E501

        :param magnitude: The magnitude of this Equipment.
        :type magnitude: str
        """

        self._magnitude = magnitude

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Equipment.

        Only relvant for weights, e.g. used 1 or 2 dumbbells  # noqa: E501

        :return: The quantity of this Equipment.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Equipment.

        Only relvant for weights, e.g. used 1 or 2 dumbbells  # noqa: E501

        :param quantity: The quantity of this Equipment.
        :type quantity: int
        """

        self._quantity = quantity
