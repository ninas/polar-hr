# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.zone_type import ZoneType
from swagger_server import util


class HRZone(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, zone_type: ZoneType=None, lower_limit: int=None, upper_limit: int=None, duration: str=None, percent_spent_above: float=None):  # noqa: E501
        """HRZone - a model defined in Swagger

        :param id: The id of this HRZone.  # noqa: E501
        :type id: int
        :param zone_type: The zone_type of this HRZone.  # noqa: E501
        :type zone_type: ZoneType
        :param lower_limit: The lower_limit of this HRZone.  # noqa: E501
        :type lower_limit: int
        :param upper_limit: The upper_limit of this HRZone.  # noqa: E501
        :type upper_limit: int
        :param duration: The duration of this HRZone.  # noqa: E501
        :type duration: str
        :param percent_spent_above: The percent_spent_above of this HRZone.  # noqa: E501
        :type percent_spent_above: float
        """
        self.swagger_types = {
            'id': int,
            'zone_type': ZoneType,
            'lower_limit': int,
            'upper_limit': int,
            'duration': str,
            'percent_spent_above': float
        }

        self.attribute_map = {
            'id': 'id',
            'zone_type': 'zoneType',
            'lower_limit': 'lowerLimit',
            'upper_limit': 'upperLimit',
            'duration': 'duration',
            'percent_spent_above': 'percentSpentAbove'
        }

        self._id = id
        self._zone_type = zone_type
        self._lower_limit = lower_limit
        self._upper_limit = upper_limit
        self._duration = duration
        self._percent_spent_above = percent_spent_above

    @classmethod
    def from_dict(cls, dikt) -> 'HRZone':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HRZone of this HRZone.  # noqa: E501
        :rtype: HRZone
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this HRZone.


        :return: The id of this HRZone.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this HRZone.


        :param id: The id of this HRZone.
        :type id: int
        """

        self._id = id

    @property
    def zone_type(self) -> ZoneType:
        """Gets the zone_type of this HRZone.


        :return: The zone_type of this HRZone.
        :rtype: ZoneType
        """
        return self._zone_type

    @zone_type.setter
    def zone_type(self, zone_type: ZoneType):
        """Sets the zone_type of this HRZone.


        :param zone_type: The zone_type of this HRZone.
        :type zone_type: ZoneType
        """
        if zone_type is None:
            raise ValueError("Invalid value for `zone_type`, must not be `None`")  # noqa: E501

        self._zone_type = zone_type

    @property
    def lower_limit(self) -> int:
        """Gets the lower_limit of this HRZone.


        :return: The lower_limit of this HRZone.
        :rtype: int
        """
        return self._lower_limit

    @lower_limit.setter
    def lower_limit(self, lower_limit: int):
        """Sets the lower_limit of this HRZone.


        :param lower_limit: The lower_limit of this HRZone.
        :type lower_limit: int
        """

        self._lower_limit = lower_limit

    @property
    def upper_limit(self) -> int:
        """Gets the upper_limit of this HRZone.


        :return: The upper_limit of this HRZone.
        :rtype: int
        """
        return self._upper_limit

    @upper_limit.setter
    def upper_limit(self, upper_limit: int):
        """Sets the upper_limit of this HRZone.


        :param upper_limit: The upper_limit of this HRZone.
        :type upper_limit: int
        """

        self._upper_limit = upper_limit

    @property
    def duration(self) -> str:
        """Gets the duration of this HRZone.

        Duration in ISO 8601 format  # noqa: E501

        :return: The duration of this HRZone.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration: str):
        """Sets the duration of this HRZone.

        Duration in ISO 8601 format  # noqa: E501

        :param duration: The duration of this HRZone.
        :type duration: str
        """

        self._duration = duration

    @property
    def percent_spent_above(self) -> float:
        """Gets the percent_spent_above of this HRZone.

        Convenience value to describe the total percentage of the workout spent in this zone or higher  # noqa: E501

        :return: The percent_spent_above of this HRZone.
        :rtype: float
        """
        return self._percent_spent_above

    @percent_spent_above.setter
    def percent_spent_above(self, percent_spent_above: float):
        """Sets the percent_spent_above of this HRZone.

        Convenience value to describe the total percentage of the workout spent in this zone or higher  # noqa: E501

        :param percent_spent_above: The percent_spent_above of this HRZone.
        :type percent_spent_above: float
        """

        self._percent_spent_above = percent_spent_above
