# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.zone_type import ZoneType
from swagger_server import util


class HRZoneRange(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, zone_type: ZoneType=None, min_time: str=None, max_time: str=None, percentage_of_workout: float=None):  # noqa: E501
        """HRZoneRange - a model defined in Swagger

        :param zone_type: The zone_type of this HRZoneRange.  # noqa: E501
        :type zone_type: ZoneType
        :param min_time: The min_time of this HRZoneRange.  # noqa: E501
        :type min_time: str
        :param max_time: The max_time of this HRZoneRange.  # noqa: E501
        :type max_time: str
        :param percentage_of_workout: The percentage_of_workout of this HRZoneRange.  # noqa: E501
        :type percentage_of_workout: float
        """
        self.swagger_types = {
            'zone_type': ZoneType,
            'min_time': str,
            'max_time': str,
            'percentage_of_workout': float
        }

        self.attribute_map = {
            'zone_type': 'zoneType',
            'min_time': 'minTime',
            'max_time': 'maxTime',
            'percentage_of_workout': 'percentageOfWorkout'
        }

        self._zone_type = zone_type
        self._min_time = min_time
        self._max_time = max_time
        self._percentage_of_workout = percentage_of_workout

    @classmethod
    def from_dict(cls, dikt) -> 'HRZoneRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HRZoneRange of this HRZoneRange.  # noqa: E501
        :rtype: HRZoneRange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def zone_type(self) -> ZoneType:
        """Gets the zone_type of this HRZoneRange.


        :return: The zone_type of this HRZoneRange.
        :rtype: ZoneType
        """
        return self._zone_type

    @zone_type.setter
    def zone_type(self, zone_type: ZoneType):
        """Sets the zone_type of this HRZoneRange.


        :param zone_type: The zone_type of this HRZoneRange.
        :type zone_type: ZoneType
        """
        if zone_type is None:
            raise ValueError("Invalid value for `zone_type`, must not be `None`")  # noqa: E501

        self._zone_type = zone_type

    @property
    def min_time(self) -> str:
        """Gets the min_time of this HRZoneRange.

        Duration in ISO 8601 format  # noqa: E501

        :return: The min_time of this HRZoneRange.
        :rtype: str
        """
        return self._min_time

    @min_time.setter
    def min_time(self, min_time: str):
        """Sets the min_time of this HRZoneRange.

        Duration in ISO 8601 format  # noqa: E501

        :param min_time: The min_time of this HRZoneRange.
        :type min_time: str
        """

        self._min_time = min_time

    @property
    def max_time(self) -> str:
        """Gets the max_time of this HRZoneRange.

        Duration in ISO 8601 format  # noqa: E501

        :return: The max_time of this HRZoneRange.
        :rtype: str
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time: str):
        """Sets the max_time of this HRZoneRange.

        Duration in ISO 8601 format  # noqa: E501

        :param max_time: The max_time of this HRZoneRange.
        :type max_time: str
        """

        self._max_time = max_time

    @property
    def percentage_of_workout(self) -> float:
        """Gets the percentage_of_workout of this HRZoneRange.

        This supersedes min/maxTime and will be used instead. Percentage from 0-100  # noqa: E501

        :return: The percentage_of_workout of this HRZoneRange.
        :rtype: float
        """
        return self._percentage_of_workout

    @percentage_of_workout.setter
    def percentage_of_workout(self, percentage_of_workout: float):
        """Sets the percentage_of_workout of this HRZoneRange.

        This supersedes min/maxTime and will be used instead. Percentage from 0-100  # noqa: E501

        :param percentage_of_workout: The percentage_of_workout of this HRZoneRange.
        :type percentage_of_workout: float
        """

        self._percentage_of_workout = percentage_of_workout
